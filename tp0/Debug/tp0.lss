
tp0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000170  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f7  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000255  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037e  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  00001656  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9e:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_Soft_Update>:

static uint8_t pwm_delta = 1;

void PWM_Soft_Update(uint16_t pwm_delta){
	static uint16_t PWM_Pos = 0;
	if(++PWM_Pos>=PWM_PERIOD){
  a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
  aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
  b6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
  ba:	24 36       	cpi	r18, 0x64	; 100
  bc:	31 05       	cpc	r19, r1
  be:	20 f0       	brcs	.+8      	; 0xc8 <PWM_Soft_Update+0x22>
		PWM_Pos = 0;
  c0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
  c4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	if(PWM_Pos<pwm_delta){
  c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
  cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
  d0:	28 17       	cp	r18, r24
  d2:	39 07       	cpc	r19, r25
  d4:	20 f4       	brcc	.+8      	; 0xde <PWM_Soft_Update+0x38>
		PWM_ON;
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	85 b9       	out	0x05, r24	; 5
  dc:	08 95       	ret
	} else {
		PWM_OFF;
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8f 7d       	andi	r24, 0xDF	; 223
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret

000000e6 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	// static uint16_t pwm_delta = 1;
	if(pwm_delta<70){
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	86 34       	cpi	r24, 0x46	; 70
 10e:	18 f4       	brcc	.+6      	; 0x116 <__vector_14+0x30>
		pwm_delta++;
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(pwm_delta == 70){
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	86 34       	cpi	r24, 0x46	; 70
 11c:	11 f4       	brne	.+4      	; 0x122 <__vector_14+0x3c>
		pwm_delta = 0;
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}	
	
	PWM_Soft_Update(pwm_delta);
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_Soft_Update>
}
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <main>:

int main(void)
{
	DDRB = 0xFF; //PBx as output
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 b9       	out	0x04, r24	; 4
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00); // Fast PWM Non Inversor
 152:	84 b5       	in	r24, 0x24	; 36
 154:	83 68       	ori	r24, 0x83	; 131
 156:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01); // Scaler 8
 158:	85 b5       	in	r24, 0x25	; 37
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249; // Some value for edge
 15e:	89 ef       	ldi	r24, 0xF9	; 249
 160:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1<<OCIE0A); // Interruption
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei(); // Enable Interruptions
 168:	78 94       	sei
 16a:	ff cf       	rjmp	.-2      	; 0x16a <main+0x1c>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
