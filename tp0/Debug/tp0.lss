
tp0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000526  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013bc  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000908  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000940  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000558  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f32  00000000  00000000  000034cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000043fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 e2       	ldi	r30, 0x26	; 38
  bc:	f5 e0       	ldi	r31, 0x05	; 5
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ae 30       	cpi	r26, 0x0E	; 14
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  ce:	0c 94 91 02 	jmp	0x522	; 0x522 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <LCDsendChar>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  d6:	65 b1       	in	r22, 0x05	; 5
  d8:	98 2f       	mov	r25, r24
  da:	90 74       	andi	r25, 0x40	; 64
  dc:	49 2f       	mov	r20, r25
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	55 95       	asr	r21
  e2:	47 95       	ror	r20
  e4:	55 95       	asr	r21
  e6:	47 95       	ror	r20
  e8:	55 95       	asr	r21
  ea:	47 95       	ror	r20
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	98 2f       	mov	r25, r24
  f2:	90 78       	andi	r25, 0x80	; 128
  f4:	29 2f       	mov	r18, r25
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 2e       	mov	r0, r18
  fa:	23 2f       	mov	r18, r19
  fc:	00 0c       	add	r0, r0
  fe:	22 1f       	adc	r18, r18
 100:	33 0b       	sbc	r19, r19
 102:	00 0c       	add	r0, r0
 104:	22 1f       	adc	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	96 2f       	mov	r25, r22
 10a:	99 7f       	andi	r25, 0xF9	; 249
 10c:	49 2b       	or	r20, r25
 10e:	24 2b       	or	r18, r20
 110:	25 b9       	out	0x05, r18	; 5
 112:	68 b1       	in	r22, 0x08	; 8
 114:	98 2f       	mov	r25, r24
 116:	90 71       	andi	r25, 0x10	; 16
 118:	49 2f       	mov	r20, r25
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	55 95       	asr	r21
 11e:	47 95       	ror	r20
 120:	55 95       	asr	r21
 122:	47 95       	ror	r20
 124:	55 95       	asr	r21
 126:	47 95       	ror	r20
 128:	98 2f       	mov	r25, r24
 12a:	90 72       	andi	r25, 0x20	; 32
 12c:	29 2f       	mov	r18, r25
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	35 95       	asr	r19
 132:	27 95       	ror	r18
 134:	35 95       	asr	r19
 136:	27 95       	ror	r18
 138:	35 95       	asr	r19
 13a:	27 95       	ror	r18
 13c:	96 2f       	mov	r25, r22
 13e:	99 7f       	andi	r25, 0xF9	; 249
 140:	49 2b       	or	r20, r25
 142:	24 2b       	or	r18, r20
 144:	28 b9       	out	0x08, r18	; 8
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	92 60       	ori	r25, 0x02	; 2
 14a:	9b b9       	out	0x0b, r25	; 11
 14c:	9b b1       	in	r25, 0x0b	; 11
 14e:	91 60       	ori	r25, 0x01	; 1
 150:	9b b9       	out	0x0b, r25	; 11
 152:	25 ed       	ldi	r18, 0xD5	; 213
 154:	2a 95       	dec	r18
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDsendChar+0x7e>
 158:	00 00       	nop
 15a:	9b b1       	in	r25, 0x0b	; 11
 15c:	9e 7f       	andi	r25, 0xFE	; 254
 15e:	9b b9       	out	0x0b, r25	; 11
 160:	9b b1       	in	r25, 0x0b	; 11
 162:	9d 7f       	andi	r25, 0xFD	; 253
 164:	9b b9       	out	0x0b, r25	; 11
 166:	95 ed       	ldi	r25, 0xD5	; 213
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDsendChar+0x92>
 16c:	00 00       	nop
 16e:	65 b1       	in	r22, 0x05	; 5
 170:	20 e1       	ldi	r18, 0x10	; 16
 172:	82 9f       	mul	r24, r18
 174:	c0 01       	movw	r24, r0
 176:	11 24       	eor	r1, r1
 178:	ac 01       	movw	r20, r24
 17a:	40 74       	andi	r20, 0x40	; 64
 17c:	55 27       	eor	r21, r21
 17e:	55 95       	asr	r21
 180:	47 95       	ror	r20
 182:	55 95       	asr	r21
 184:	47 95       	ror	r20
 186:	55 95       	asr	r21
 188:	47 95       	ror	r20
 18a:	55 95       	asr	r21
 18c:	47 95       	ror	r20
 18e:	9c 01       	movw	r18, r24
 190:	20 78       	andi	r18, 0x80	; 128
 192:	33 27       	eor	r19, r19
 194:	02 2e       	mov	r0, r18
 196:	23 2f       	mov	r18, r19
 198:	00 0c       	add	r0, r0
 19a:	22 1f       	adc	r18, r18
 19c:	33 0b       	sbc	r19, r19
 19e:	00 0c       	add	r0, r0
 1a0:	22 1f       	adc	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	36 2f       	mov	r19, r22
 1a6:	39 7f       	andi	r19, 0xF9	; 249
 1a8:	43 2b       	or	r20, r19
 1aa:	24 2b       	or	r18, r20
 1ac:	25 b9       	out	0x05, r18	; 5
 1ae:	48 b1       	in	r20, 0x08	; 8
 1b0:	9c 01       	movw	r18, r24
 1b2:	20 71       	andi	r18, 0x10	; 16
 1b4:	33 27       	eor	r19, r19
 1b6:	35 95       	asr	r19
 1b8:	27 95       	ror	r18
 1ba:	35 95       	asr	r19
 1bc:	27 95       	ror	r18
 1be:	35 95       	asr	r19
 1c0:	27 95       	ror	r18
 1c2:	80 72       	andi	r24, 0x20	; 32
 1c4:	99 27       	eor	r25, r25
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	94 2f       	mov	r25, r20
 1d4:	99 7f       	andi	r25, 0xF9	; 249
 1d6:	29 2b       	or	r18, r25
 1d8:	82 2b       	or	r24, r18
 1da:	88 b9       	out	0x08, r24	; 8
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	85 ed       	ldi	r24, 0xD5	; 213
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDsendChar+0x114>
 1ee:	00 00       	nop
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	8d 7f       	andi	r24, 0xFD	; 253
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	95 ed       	ldi	r25, 0xD5	; 213
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDsendChar+0x128>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <LCDsendCommand>:
 206:	65 b1       	in	r22, 0x05	; 5
 208:	98 2f       	mov	r25, r24
 20a:	90 74       	andi	r25, 0x40	; 64
 20c:	49 2f       	mov	r20, r25
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	55 95       	asr	r21
 212:	47 95       	ror	r20
 214:	55 95       	asr	r21
 216:	47 95       	ror	r20
 218:	55 95       	asr	r21
 21a:	47 95       	ror	r20
 21c:	55 95       	asr	r21
 21e:	47 95       	ror	r20
 220:	98 2f       	mov	r25, r24
 222:	90 78       	andi	r25, 0x80	; 128
 224:	29 2f       	mov	r18, r25
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	23 2f       	mov	r18, r19
 22c:	00 0c       	add	r0, r0
 22e:	22 1f       	adc	r18, r18
 230:	33 0b       	sbc	r19, r19
 232:	00 0c       	add	r0, r0
 234:	22 1f       	adc	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	96 2f       	mov	r25, r22
 23a:	99 7f       	andi	r25, 0xF9	; 249
 23c:	49 2b       	or	r20, r25
 23e:	24 2b       	or	r18, r20
 240:	25 b9       	out	0x05, r18	; 5
 242:	68 b1       	in	r22, 0x08	; 8
 244:	98 2f       	mov	r25, r24
 246:	90 71       	andi	r25, 0x10	; 16
 248:	49 2f       	mov	r20, r25
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	55 95       	asr	r21
 24e:	47 95       	ror	r20
 250:	55 95       	asr	r21
 252:	47 95       	ror	r20
 254:	55 95       	asr	r21
 256:	47 95       	ror	r20
 258:	98 2f       	mov	r25, r24
 25a:	90 72       	andi	r25, 0x20	; 32
 25c:	29 2f       	mov	r18, r25
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	35 95       	asr	r19
 262:	27 95       	ror	r18
 264:	35 95       	asr	r19
 266:	27 95       	ror	r18
 268:	35 95       	asr	r19
 26a:	27 95       	ror	r18
 26c:	96 2f       	mov	r25, r22
 26e:	99 7f       	andi	r25, 0xF9	; 249
 270:	49 2b       	or	r20, r25
 272:	24 2b       	or	r18, r20
 274:	28 b9       	out	0x08, r18	; 8
 276:	9b b1       	in	r25, 0x0b	; 11
 278:	91 60       	ori	r25, 0x01	; 1
 27a:	9b b9       	out	0x0b, r25	; 11
 27c:	ef e9       	ldi	r30, 0x9F	; 159
 27e:	ff e0       	ldi	r31, 0x0F	; 15
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCDsendCommand+0x7a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCDsendCommand+0x80>
 286:	00 00       	nop
 288:	9b b1       	in	r25, 0x0b	; 11
 28a:	9e 7f       	andi	r25, 0xFE	; 254
 28c:	9b b9       	out	0x0b, r25	; 11
 28e:	ef e9       	ldi	r30, 0x9F	; 159
 290:	ff e0       	ldi	r31, 0x0F	; 15
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCDsendCommand+0x8c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCDsendCommand+0x92>
 298:	00 00       	nop
 29a:	65 b1       	in	r22, 0x05	; 5
 29c:	f0 e1       	ldi	r31, 0x10	; 16
 29e:	8f 9f       	mul	r24, r31
 2a0:	c0 01       	movw	r24, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	ac 01       	movw	r20, r24
 2a6:	40 74       	andi	r20, 0x40	; 64
 2a8:	55 27       	eor	r21, r21
 2aa:	55 95       	asr	r21
 2ac:	47 95       	ror	r20
 2ae:	55 95       	asr	r21
 2b0:	47 95       	ror	r20
 2b2:	55 95       	asr	r21
 2b4:	47 95       	ror	r20
 2b6:	55 95       	asr	r21
 2b8:	47 95       	ror	r20
 2ba:	9c 01       	movw	r18, r24
 2bc:	20 78       	andi	r18, 0x80	; 128
 2be:	33 27       	eor	r19, r19
 2c0:	02 2e       	mov	r0, r18
 2c2:	23 2f       	mov	r18, r19
 2c4:	00 0c       	add	r0, r0
 2c6:	22 1f       	adc	r18, r18
 2c8:	33 0b       	sbc	r19, r19
 2ca:	00 0c       	add	r0, r0
 2cc:	22 1f       	adc	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	36 2f       	mov	r19, r22
 2d2:	39 7f       	andi	r19, 0xF9	; 249
 2d4:	43 2b       	or	r20, r19
 2d6:	24 2b       	or	r18, r20
 2d8:	25 b9       	out	0x05, r18	; 5
 2da:	48 b1       	in	r20, 0x08	; 8
 2dc:	9c 01       	movw	r18, r24
 2de:	20 71       	andi	r18, 0x10	; 16
 2e0:	33 27       	eor	r19, r19
 2e2:	35 95       	asr	r19
 2e4:	27 95       	ror	r18
 2e6:	35 95       	asr	r19
 2e8:	27 95       	ror	r18
 2ea:	35 95       	asr	r19
 2ec:	27 95       	ror	r18
 2ee:	80 72       	andi	r24, 0x20	; 32
 2f0:	99 27       	eor	r25, r25
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	94 2f       	mov	r25, r20
 300:	99 7f       	andi	r25, 0xF9	; 249
 302:	29 2b       	or	r18, r25
 304:	82 2b       	or	r24, r18
 306:	88 b9       	out	0x08, r24	; 8
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	8b b9       	out	0x0b, r24	; 11
 30e:	8f e9       	ldi	r24, 0x9F	; 159
 310:	9f e0       	ldi	r25, 0x0F	; 15
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCDsendCommand+0x10c>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCDsendCommand+0x112>
 318:	00 00       	nop
 31a:	8b b1       	in	r24, 0x0b	; 11
 31c:	8e 7f       	andi	r24, 0xFE	; 254
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	ef e9       	ldi	r30, 0x9F	; 159
 322:	ff e0       	ldi	r31, 0x0F	; 15
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCDsendCommand+0x11e>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCDsendCommand+0x124>
 32a:	00 00       	nop
 32c:	08 95       	ret

0000032e <LCDclr>:
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
 334:	08 95       	ret

00000336 <LCDhome>:
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
 33c:	08 95       	ret

0000033e <LCDstring>:
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	69 f0       	breq	.+26     	; 0x364 <LCDstring+0x26>
 34a:	d6 2f       	mov	r29, r22
 34c:	8c 01       	movw	r16, r24
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	07 c0       	rjmp	.+14     	; 0x360 <LCDstring+0x22>
 352:	f8 01       	movw	r30, r16
 354:	ec 0f       	add	r30, r28
 356:	f1 1d       	adc	r31, r1
 358:	80 81       	ld	r24, Z
 35a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
 35e:	cf 5f       	subi	r28, 0xFF	; 255
 360:	cd 17       	cp	r28, r29
 362:	b8 f3       	brcs	.-18     	; 0x352 <LCDstring+0x14>
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	7c 01       	movw	r14, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 37c:	86 2f       	mov	r24, r22
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	80 64       	ori	r24, 0x40	; 64
	for (i=0; i<8; i++){
 38e:	c0 e0       	ldi	r28, 0x00	; 0
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	0d c0       	rjmp	.+26     	; 0x3ae <LCDdefinechar+0x40>
		pcc=pgm_read_byte(&pc[i]);
 394:	f7 01       	movw	r30, r14
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
 39a:	14 91       	lpm	r17, Z
		LCDsendCommand(a++);
 39c:	01 e0       	ldi	r16, 0x01	; 1
 39e:	08 0f       	add	r16, r24
 3a0:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
		LCDsendChar(pcc);
 3a4:	81 2f       	mov	r24, r17
 3a6:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 3aa:	21 96       	adiw	r28, 0x01	; 1
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
 3ac:	80 2f       	mov	r24, r16
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 3ae:	c8 30       	cpi	r28, 0x08	; 8
 3b0:	d1 05       	cpc	r29, r1
 3b2:	80 f3       	brcs	.-32     	; 0x394 <LCDdefinechar+0x26>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	08 95       	ret

000003c2 <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c6:	8f e5       	ldi	r24, 0x5F	; 95
 3c8:	9a ee       	ldi	r25, 0xEA	; 234
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCDinit+0x8>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCDinit+0xe>
 3d0:	00 00       	nop
#ifdef LCD_4bit	
	//4 bit part
	_delay_ms(15);
	//LDP=0x00;
	LCD_DATAWR(0x00);	
 3d2:	85 b1       	in	r24, 0x05	; 5
 3d4:	89 7f       	andi	r24, 0xF9	; 249
 3d6:	85 b9       	out	0x05, r24	; 5
 3d8:	88 b1       	in	r24, 0x08	; 8
 3da:	89 7f       	andi	r24, 0xF9	; 249
 3dc:	88 b9       	out	0x08, r24	; 8
	LCP=0x00;
 3de:	1b b8       	out	0x0b, r1	; 11
	DDRC|=0x06;
 3e0:	87 b1       	in	r24, 0x07	; 7
 3e2:	86 60       	ori	r24, 0x06	; 6
 3e4:	87 b9       	out	0x07, r24	; 7
	DDRB|=0x06;
 3e6:	84 b1       	in	r24, 0x04	; 4
 3e8:	86 60       	ori	r24, 0x06	; 6
 3ea:	84 b9       	out	0x04, r24	; 4
	LDDR1|=1<<LCD_D7|1<<LCD_D6;
 3ec:	84 b1       	in	r24, 0x04	; 4
 3ee:	86 60       	ori	r24, 0x06	; 6
 3f0:	84 b9       	out	0x04, r24	; 4
	LDDR2|=1<<LCD_D4|1<<LCD_D5;
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	86 60       	ori	r24, 0x06	; 6
 3f6:	87 b9       	out	0x07, r24	; 7
	//LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 3f8:	8a b1       	in	r24, 0x0a	; 10
 3fa:	83 60       	ori	r24, 0x03	; 3
 3fc:	8a b9       	out	0x0a, r24	; 10
   //---------one------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
 3fe:	85 b1       	in	r24, 0x05	; 5
 400:	89 7f       	andi	r24, 0xF9	; 249
 402:	85 b9       	out	0x05, r24	; 5
 404:	88 b1       	in	r24, 0x08	; 8
 406:	86 60       	ori	r24, 0x06	; 6
 408:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 40a:	8b b1       	in	r24, 0x0b	; 11
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	8b b9       	out	0x0b, r24	; 11
 410:	8f e9       	ldi	r24, 0x9F	; 159
 412:	9f e0       	ldi	r25, 0x0F	; 15
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 41c:	8b b1       	in	r24, 0x0b	; 11
 41e:	8e 7f       	andi	r24, 0xFE	; 254
 420:	8b b9       	out	0x0b, r24	; 11
 422:	8f e9       	ldi	r24, 0x9F	; 159
 424:	9f e0       	ldi	r25, 0x0F	; 15
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00110000);	
 42e:	85 b1       	in	r24, 0x05	; 5
 430:	89 7f       	andi	r24, 0xF9	; 249
 432:	85 b9       	out	0x05, r24	; 5
 434:	88 b1       	in	r24, 0x08	; 8
 436:	86 60       	ori	r24, 0x06	; 6
 438:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 43a:	8b b1       	in	r24, 0x0b	; 11
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	8b b9       	out	0x0b, r24	; 11
 440:	8f e9       	ldi	r24, 0x9F	; 159
 442:	9f e0       	ldi	r25, 0x0F	; 15
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 44c:	8b b1       	in	r24, 0x0b	; 11
 44e:	8e 7f       	andi	r24, 0xFE	; 254
 450:	8b b9       	out	0x0b, r24	; 11
 452:	8f e9       	ldi	r24, 0x9F	; 159
 454:	9f e0       	ldi	r25, 0x0F	; 15
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	//LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
	LCD_DATAWR(0b00100000);	
 45e:	85 b1       	in	r24, 0x05	; 5
 460:	89 7f       	andi	r24, 0xF9	; 249
 462:	85 b9       	out	0x05, r24	; 5
 464:	88 b1       	in	r24, 0x08	; 8
 466:	89 7f       	andi	r24, 0xF9	; 249
 468:	84 60       	ori	r24, 0x04	; 4
 46a:	88 b9       	out	0x08, r24	; 8
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 46c:	8b b1       	in	r24, 0x0b	; 11
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	8b b9       	out	0x0b, r24	; 11
 472:	8f e9       	ldi	r24, 0x9F	; 159
 474:	9f e0       	ldi	r25, 0x0F	; 15
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 47e:	8b b1       	in	r24, 0x0b	; 11
 480:	8e 7f       	andi	r24, 0xFE	; 254
 482:	8b b9       	out	0x0b, r24	; 11
 484:	8f e9       	ldi	r24, 0x9F	; 159
 486:	9f e0       	ldi	r25, 0x0F	; 15
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 490:	88 e2       	ldi	r24, 0x28	; 40
 492:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
 496:	8c e0       	ldi	r24, 0x0C	; 12
 498:	0e 94 03 01 	call	0x206	; 0x206 <LCDsendCommand>
		//init 8 custom chars
	uint8_t ch=0, chn=0;
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	c0 e0       	ldi	r28, 0x00	; 0
	while(ch<64)
 4a0:	0a c0       	rjmp	.+20     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 4a2:	d1 e0       	ldi	r29, 0x01	; 1
 4a4:	d6 0f       	add	r29, r22
 4a6:	8c 2f       	mov	r24, r28
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	88 59       	subi	r24, 0x98	; 152
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
 4ae:	0e 94 b7 01 	call	0x36e	; 0x36e <LCDdefinechar>
		ch=ch+8;
 4b2:	c8 5f       	subi	r28, 0xF8	; 248
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 4b4:	6d 2f       	mov	r22, r29
	LCDsendCommand(0b00101000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 4b6:	c0 34       	cpi	r28, 0x40	; 64
 4b8:	a0 f3       	brcs	.-24     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <main>:
#include <stdint.h>

#include "lcd.h"

int main(void)
{	
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	2d 97       	sbiw	r28, 0x0d	; 13
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
	LCDinit();
 4d4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LCDinit>
 4d8:	8f e9       	ldi	r24, 0x9F	; 159
 4da:	9f e0       	ldi	r25, 0x0F	; 15
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <main+0x1c>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <main+0x22>
 4e2:	00 00       	nop
	_delay_ms(1);
	LCDclr();
 4e4:	0e 94 97 01 	call	0x32e	; 0x32e <LCDclr>
 4e8:	8f e9       	ldi	r24, 0x9F	; 159
 4ea:	9f e0       	ldi	r25, 0x0F	; 15
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <main+0x2c>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x32>
 4f2:	00 00       	nop
	_delay_ms(1);
	LCDhome();
 4f4:	0e 94 9b 01 	call	0x336	; 0x336 <LCDhome>
 4f8:	8f e9       	ldi	r24, 0x9F	; 159
 4fa:	9f e0       	ldi	r25, 0x0F	; 15
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <main+0x3c>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x42>
 502:	00 00       	nop
	_delay_ms(1);
		
	uint8_t msnj[] = "Hello World!";
 504:	8d e0       	ldi	r24, 0x0D	; 13
 506:	e0 e0       	ldi	r30, 0x00	; 0
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	de 01       	movw	r26, r28
 50c:	11 96       	adiw	r26, 0x01	; 1
 50e:	01 90       	ld	r0, Z+
 510:	0d 92       	st	X+, r0
 512:	8a 95       	dec	r24
 514:	e1 f7       	brne	.-8      	; 0x50e <main+0x4e>
	LCDstring(msnj, sizeof(msnj) - 1);
 516:	6c e0       	ldi	r22, 0x0C	; 12
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDstring>
 520:	ff cf       	rjmp	.-2      	; 0x520 <main+0x60>

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
